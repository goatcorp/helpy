@page "/"

@using Helpy.Conversation;
@inject HttpClient Http

<PageTitle>XIVLauncher Help</PageTitle>

@if(conversation == null)
{
    <p>Loading...</p>
}
else
{
    var lastWasUser = true;
    @foreach (var message in conversation.Messages)
    {
        var isChange = lastWasUser != message.IsUser;

        var msgClass = "msg " + (message.IsUser ? "msg-user" : "msg-bot");
        @if (isChange)
        {
            var nameClass = "name " + (message.IsUser ? "name-user" : "name-bot");
            <span class=@nameClass>@(message.IsUser ? "You" : "Helpy")</span>
            lastWasUser = message.IsUser;
        }
        <div class="@msgClass">
            @if (message is ConversationManager.TextMessage textMessage)
            {
                <p>@((MarkupString)textMessage.Text)</p>
            }
            else if (message is ConversationManager.ImageMessage imageMessage)
            {
                <div class="msg-img-container">
                    <img src="@imageMessage.Src" alt="@imageMessage.Alt"/>
                </div>
            }
        </div>
    }

    @switch(conversation.State)
    {
        case ConversationManager.ConversationState.Default:
            break;

        case ConversationManager.ConversationState.UploadTsPack:
        {
            <hr />
            <div class="msg msg-action">
                <p>Drag the .tspack file here.</p>
                <InputFile OnChange="@LoadTsPack" accept=".tspack"></InputFile>
            </div>
        }
            break;

        case ConversationManager.ConversationState.Choicer:
        {
            <hr />
            <div class="msg msg-choices">
            <p>Please pick a choice:</p>
                @foreach(var choice in conversation.Choices!)
                {
                        <p class="choice"><a @onclick="() => conversation.ChoicerChoose(choice.Key)" href="#">@choice.Value</a></p>
                }
            </div>
        }    
            break;

        case ConversationManager.ConversationState.Finish:
        {
            <hr />
                <p>Thanks for using Helpy! I hope we could be helpful. If you have any more questions, don't hesitate to reach out.</p>
        }
            break;
    }
}

@code {
    private ConversationManager? conversation;

    public async Task RunDialogue()
    {
        conversation = new ConversationManager();
        await conversation.LoadAndInit(Http);
    }

    public async Task LoadTsPack(InputFileChangeEventArgs e)
    {
        using var stream = e.File.OpenReadStream(50_000_000);
        conversation!.LoadTsPack(await ReadFully(stream));
    }

    public static async Task<byte[]> ReadFully(Stream input)
    {
        using (MemoryStream ms = new MemoryStream())
        {
            await input.CopyToAsync(ms);
            return ms.ToArray();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RunDialogue();
    }
}